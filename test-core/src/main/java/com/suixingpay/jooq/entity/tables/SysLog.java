/*
 * This file is generated by jOOQ.
 */
package com.suixingpay.jooq.entity.tables;


import com.suixingpay.jooq.entity.JooqTest;
import com.suixingpay.jooq.entity.Keys;
import com.suixingpay.jooq.entity.tables.records.SysLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysLog extends TableImpl<SysLogRecord> {

    private static final long serialVersionUID = 334023005;

    /**
     * The reference instance of <code>jooq_test.sys_log</code>
     */
    public static final SysLog SYS_LOG = new SysLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysLogRecord> getRecordType() {
        return SysLogRecord.class;
    }

    /**
     * The column <code>jooq_test.sys_log.id</code>.
     */
    public final TableField<SysLogRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jooq_test.sys_log.ip_address</code>.
     */
    public final TableField<SysLogRecord, String> IP_ADDRESS = createField("ip_address", org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jooq_test.sys_log.oper_id</code>.
     */
    public final TableField<SysLogRecord, Integer> OPER_ID = createField("oper_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jooq_test.sys_log.user_name</code>.
     */
    public final TableField<SysLogRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jooq_test.sys_log.module_name</code>.
     */
    public final TableField<SysLogRecord, String> MODULE_NAME = createField("module_name", org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jooq_test.sys_log.method_name</code>.
     */
    public final TableField<SysLogRecord, String> METHOD_NAME = createField("method_name", org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jooq_test.sys_log.method_desc</code>.
     */
    public final TableField<SysLogRecord, String> METHOD_DESC = createField("method_desc", org.jooq.impl.SQLDataType.VARCHAR(100).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jooq_test.sys_log.oper_content</code>.
     */
    public final TableField<SysLogRecord, String> OPER_CONTENT = createField("oper_content", org.jooq.impl.SQLDataType.VARCHAR(6000).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jooq_test.sys_log.create_time</code>.
     */
    public final TableField<SysLogRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.precision(19).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>jooq_test.sys_log.app_id</code>.
     */
    public final TableField<SysLogRecord, Integer> APP_ID = createField("app_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>jooq_test.sys_log</code> table reference
     */
    public SysLog() {
        this(DSL.name("sys_log"), null);
    }

    /**
     * Create an aliased <code>jooq_test.sys_log</code> table reference
     */
    public SysLog(String alias) {
        this(DSL.name(alias), SYS_LOG);
    }

    /**
     * Create an aliased <code>jooq_test.sys_log</code> table reference
     */
    public SysLog(Name alias) {
        this(alias, SYS_LOG);
    }

    private SysLog(Name alias, Table<SysLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysLog(Name alias, Table<SysLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SysLog(Table<O> child, ForeignKey<O, SysLogRecord> key) {
        super(child, key, SYS_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JooqTest.JOOQ_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SysLogRecord> getPrimaryKey() {
        return Keys.PK_SYS_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SysLogRecord>> getKeys() {
        return Arrays.<UniqueKey<SysLogRecord>>asList(Keys.PK_SYS_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysLog as(String alias) {
        return new SysLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysLog as(Name alias) {
        return new SysLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysLog rename(String name) {
        return new SysLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysLog rename(Name name) {
        return new SysLog(name, null);
    }
}
